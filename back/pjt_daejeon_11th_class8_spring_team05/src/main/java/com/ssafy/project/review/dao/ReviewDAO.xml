<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.project.review.dao.ReviewDAO">
	<!-- 리뷰 추가 -->
	<insert id="insert" parameterType="reviewDTO"
		useGeneratedKeys="true" keyProperty="rid">
		insert into review(user_id, aid,
		title, contents, rating)
		values(#{user_id}, #{aid}, #{title},
		#{contents}, #{rating});
	</insert>
	<insert id="insertPlan" parameterType="List">
		INSERT INTO plan (user_id, date, aid, p_order)
		VALUES
		<foreach collection="list" item="item" index="index"
			separator=",">
			(#{item.userId}, #{item.date}, #{item.aid}, #{item.pOrder})
		</foreach>
	</insert>
	<!-- 리뷰 삭제 -->
	<delete id="deleteReview" parameterType="int">
		DELETE FROM review
		WHERE
		rid = #{rid}
	</delete>
	<!-- 리뷰 업데이트 -->
	<update id="updateReview" parameterType="reviewDTO">
		UPDATE review
		SET title =
		#{title},
		contents = #{contents},
		rating = #{rating}
		WHERE rid = #{rid}
	</update>
	<!-- 후기글 조회 by rid -->
	<select id="selectOneReviewByRid" resultType="reviewDTO">
		SELECT *
		FROM review
		WHERE rid = #{rid}
	</select>
	<!-- 리뷰 조회 -->
	<select id="selectReviewByRid" parameterType="int"
		resultType="map">
		SELECT
		r.*,
		COALESCE(l.like_count, 0) AS like_count,
		COALESCE(c.comment_count, 0) AS comment_count,
		u.nickname
		FROM
		review r
		LEFT JOIN (
		SELECT
		rid,
		COUNT(*) AS like_count
		FROM
		review_like
		GROUP BY
		rid
		) l ON r.rid = l.rid
		LEFT JOIN (
		SELECT
		rid,
		COUNT(*) AS comment_count
		FROM
		comment
		GROUP BY
		rid
		) c ON r.rid = c.rid
		INNER JOIN user u ON
		r.user_id = u.user_id
		WHERE
		r.rid = #{rid}
		ORDER BY RAND()
	</select>


	<!-- 키워드 리뷰 조회 -->
	<select id="selectReview" parameterType="String"
		resultType="map">
		SELECT DISTINCT
		r.*,
		a.first_image,
		u.nickname
		FROM
		review r
		INNER JOIN
		attraction_info a ON r.aid = a.content_id
		INNER JOIN
		user u ON
		r.user_id = u.user_id
		WHERE
		a.addr1 LIKE CONCAT('%', #{keyword}, '%') OR
		a.title LIKE CONCAT('%', #{keyword}, '%') OR
		r.title LIKE CONCAT('%',#{keyword}, '%');
	</select>

	<!-- 전체 리뷰 조회 -->
	<select id="selectAllReview" parameterType="String"
		resultType="map">
		SELECT DISTINCT
		r.*,
		a.first_image,
		u.nickname
		FROM
		review r
		INNER JOIN
		attraction_info a ON r.aid = a.content_id
		INNER JOIN
		user u ON
		r.user_id = u.user_id
		ORDER BY RAND()
	</select>

	<!-- 내가 쓴 리뷰 모아보기 -->
	<select id="selectReviewByUserId" parameterType="String"
		resultType="map">
		SELECT r.*,u.nickname,ai.first_image
		FROM `review` r
		JOIN user u ON u.user_id = r.user_id
		JOIN attraction_info ai ON r.aid = ai.content_id
		WHERE r.user_id = #{user_id};
	</select>

	<!-- 게시물 좋아요 -->
	<insert id="likeReviewByRid">
		INSERT INTO `review_like` (`rid`, `user_id`) VALUES
		(#{rid}, #{id});
	</insert>

	<delete id="deleteLikeReviewByRid">
		DELETE FROM `review_like` WHERE `rid` = #{rid} AND
		`user_id` = #{id};
	</delete>

	<select id="likeReviewByUid" parameterType="String"
		resultType="map">
		SELECT r.*,u.nickname,ai.first_image
		FROM `review` r
		LEFT JOIN `review_like` l ON r.rid
		= l.rid
		JOIN user u ON u.user_id = l.user_id
		JOIN attraction_info ai ON r.aid = ai.content_id
		WHERE l.user_id = #{userId};
	</select>

	<select id="getLikeCountByRid">
		SELECT COUNT(*)
		FROM review_like
		WHERE rid = #{rid};
	</select>

	<select id="getReadCountByRid">
		SELECT view_count
		FROM review
		WHERE rid = #{rid};
	</select>

	<select id="checkLikeReviewByRid">
		SELECT COUNT(*)
		FROM review_like
		WHERE rid = #{rid} and user_id = #{userId};
	</select>
	
	<update id="updateReadCount">
		UPDATE review
		SET view_count = view_count+1
		WHERE rid = #{rid}
	</update>

	<!-- <resultMap id="reviewResultMap" type="reviewDTO"> -->
	<!-- <id property="jid" column="jid"/> -->
	<!-- <result property="aid" column="aid"/> -->
	<!-- <result property="userId" column="user_id"/> -->
	<!-- </resultMap> -->

</mapper>